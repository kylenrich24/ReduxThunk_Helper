{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.jsx","components/PostList.jsx","components/App.jsx","reducers/index.js","reducers/postsReducer.js","reducers/userReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","getState","a","jsonPlaceholder","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","style","color","className","name","Component","connect","state","ownProps","find","userId","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","renderList","_","chain","uniq","forEach","value","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"iRAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yCCUEC,EAAa,yDAAM,WAAOC,EAAUC,GAAjB,eAAAC,EAAA,sEACPC,EAAgBC,IAAI,UADb,OACxBC,EADwB,OAG9BL,EAAS,CAAEM,KAAM,cAAeC,QAASF,EAASG,OAHpB,2CAAN,yDAMbC,EAAY,SAACC,GAAD,8CAAQ,WAAOV,GAAP,eAAAE,EAAA,sEACRC,EAAgBC,IAAhB,iBAA8BM,IADtB,OACzBL,EADyB,OAG/BL,EAAS,CAAEM,KAAM,aAAcC,QAASF,EAASG,OAHlB,2CAAR,uDCfnBG,E,uKACM,IACAC,EAASC,KAAKC,MAAdF,KACR,OAAKA,EAKH,yBAAKG,MAAO,CAAEC,MAAO,QAAUC,UAAU,UACtCL,EAAKM,MALD,4C,GAJYC,aAmBVC,eAJS,SAACC,EAAOC,GAC9B,MAAO,CAAEV,KAAMS,EAAMT,KAAKW,MAAK,SAACX,GAAD,OAAUU,EAASE,aAGrCJ,CAAyBT,GChBlCc,E,kLAEFZ,KAAKC,MAAMY,uB,mCAIX,OAAOb,KAAKC,MAAMa,MAAMC,KAAI,SAACC,GAC3B,OACE,yBAAKZ,UAAU,OAAOa,IAAKD,EAAKnB,IAC9B,uBAAGO,UAAU,mCACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,4BAAKY,EAAKE,OACV,2BAAIF,EAAKG,OAEX,kBAAC,EAAD,CAAYR,OAAQK,EAAKL,gB,+BAQjC,OAAO,yBAAKP,UAAU,2BAA2BJ,KAAKoB,kB,GAvBnCd,aA+BRC,eAJS,SAACC,GACvB,MAAO,CAAEM,MAAON,EAAMM,SAGgB,CAAED,mBFnCR,yDAAM,WAAO1B,EAAUC,GAAjB,SAAAC,EAAA,sEAChCF,EAASD,KADuB,OAGtCmC,IAAEC,MAAMlC,IAAW0B,OAChBC,IAAI,UACJQ,OACAC,SAAQ,SAAC3B,GAAD,OAAQV,EAASS,EAAUC,OACnC4B,QAPmC,2CAAN,0DEmCnBlB,CAAiDK,GClBjDc,EAhBH,WACV,OACE,yBAAKtB,UAAU,gBACb,6BACA,wBAAIF,MAAO,CAAEC,MAAO,UAApB,sLAKA,6BACA,6BACA,kBAAC,EAAD,Q,QCXSwB,cAAgB,CAC7Bb,MCLa,WAAyB,IAAxBN,EAAuB,uDAAf,GAAIoB,EAAW,uCACrC,OAAQA,EAAOnC,MACb,IAAK,cACH,OAAOmC,EAAOlC,QAChB,QACE,OAAOc,IDCXT,KENa,WAAyB,IAAxBS,EAAuB,uDAAf,GAAIoB,EAAW,uCACrC,OAAQA,EAAOnC,MACb,IAAK,aACH,MAAM,GAAN,mBAAWe,GAAX,CAAkBoB,EAAOlC,UAC3B,QACE,OAAOc,MCKPqB,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,cAAc,Y","file":"static/js/main.54e086e2.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://jsonplaceholder.typicode.com\",\r\n});\r\n","import _ from \"lodash\";\r\nimport jsonPlaceholder from \"../apis/jsonPlaceholder\";\r\n\r\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\r\n  await dispatch(fetchPosts());\r\n\r\n  _.chain(getState().posts)\r\n    .map(\"userId\")\r\n    .uniq()\r\n    .forEach((id) => dispatch(fetchUser(id)))\r\n    .value();\r\n};\r\n\r\nexport const fetchPosts = () => async (dispatch, getState) => {\r\n  const response = await jsonPlaceholder.get(\"/posts\");\r\n\r\n  dispatch({ type: \"FETCH_POSTS\", payload: response.data });\r\n};\r\n\r\nexport const fetchUser = (id) => async (dispatch) => {\r\n  const response = await jsonPlaceholder.get(`/users/${id}`);\r\n\r\n  dispatch({ type: \"FETCH_USER\", payload: response.data });\r\n};\r\n\r\n// export const fetchUser = (id) => (dispatch, getState) =>\r\n//   _fetchUser(id, dispatch);\r\n\r\n// const _fetchUser = _.memoize(async (id, dispatch) => {\r\n//   const response = await jsonPlaceholder.get(`/users/${id}`);\r\n\r\n//   dispatch({ type: \"FETCH_USER\", payload: response.data });\r\n// });\r\n","import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nclass UserHeader extends Component {\r\n  render() {\r\n    const { user } = this.props;\r\n    if (!user) {\r\n      return <div>Loading</div>;\r\n    }\r\n\r\n    return (\r\n      <div style={{ color: \"blue\" }} className=\"header\">\r\n        {user.name}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return { user: state.user.find((user) => ownProps.userId) };\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserHeader);\r\n","import React, { Component } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPostsAndUsers } from \"../actions\";\r\n\r\nimport UserHeader from \"./UserHeader\";\r\n\r\nclass PostList extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchPostsAndUsers();\r\n  }\r\n\r\n  renderList() {\r\n    return this.props.posts.map((post) => {\r\n      return (\r\n        <div className=\"item\" key={post.id}>\r\n          <i className=\"large middle aligned icon user\" />\r\n          <div className=\"content\">\r\n            <div className=\"description\">\r\n              <h2>{post.title}</h2>\r\n              <p>{post.body}</p>\r\n            </div>\r\n            <UserHeader userId={post.userId} />\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"ui relaxed divided list\">{this.renderList()}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { posts: state.posts };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchPostsAndUsers })(PostList);\r\n","import React from \"react\";\r\n\r\nimport PostList from \"./PostList\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"ui container\">\r\n      <br />\r\n      <h1 style={{ color: \"green\" }}>\r\n        This app fetches API from JSONPlaceholder using Axios, Redux-Thunk (for\r\n        async action creators that performs the api requests) and React-Redux\r\n        (to handle State management [store])\r\n      </h1>\r\n      <br />\r\n      <br />\r\n      <PostList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport postsReducer from \"./postsReducer\";\r\nimport userReducer from \"./userReducer\";\r\n\r\nexport default combineReducers({\r\n  posts: postsReducer,\r\n  user: userReducer,\r\n});\r\n","export default (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_POSTS\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_USER\":\r\n      return [...state, action.payload];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport App from \"./components/App\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}